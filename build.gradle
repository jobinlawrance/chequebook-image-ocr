buildscript {
    ext.gretty_version = '2.0.0'
    ext.slf4j_version = '1.7.25'

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.akhikhl.gretty:gretty:$gretty_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.github.johnrengelman.shadow'

group 'com.udaancapital'
version '0.0.1'
mainClassName = "io.ktor.server.cio.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

mainClassName = 'com.udaancapital.ApplicationKt'

// This task will generate your fat JAR and put it in the ./build/libs/ directory
shadowJar {
    baseName = 'my-application'
    classifier = null
    version = null
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

webAppDirName = 'webapp'

gretty {
    contextPath = '/'
    logbackConfigFile = 'resources/logback.xml'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

kotlin.experimental.coroutines = 'enable'

afterEvaluate {
    run.dependsOn(tasks.findByName("appRun"))
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}

stage.dependsOn(copyToLib)